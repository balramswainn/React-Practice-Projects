import {createSlice, nanoid } from '@reduxjs/toolkit';


const initialState = {
    todos: [{id: 1, text: "Hello world"}],  //tumhare slice ka default data jab app start hota hai.Ye decides karta hai state ka shape (structure).Tum jo state store karna chahte ho uska structure initialState me define karo.Ye structure decide karega ki reducer functions me tum state ko kaise handle karoge.
    //Tum initialState ko ek default data / dummy content samajh lo,Aur reducers ke andar banaya hua todo = user ke action se create hone wala real data.

    //Dummy data kyun dikh raha hai? Redux store start hone ke time pe initialState hi store ke andar chala jata hai.Tumne default me ek todo daal diya tha, isliye wo UI me render ho raha hai.Bas initialState ko empty kar do: todos: [],Real project me initialState ko empty hi rakhte hain.
}



export const todoSlice = createSlice({
    name: 'todo',                  //createSlice me name ek string value hoti hai jo slice ka identifier hota hai.Ye Redux automatically action types generate karte waqt use hota hai.
    initialState,
    reducers: {
        addTodo: (state, action) => {   //Redux slice reducer functions me hamesha do parameters hote hain:state,action
            const todo = {
                id: nanoid(), 
                text: action.payload  //yaha sirf ek hi value arahi hai koi object nhi hai ,and yaha addtodo file me  dispatch(addTodo(input)) hai ye direct value hai so isiliye action.payload.text nhi likh sakte 
            }
            state.todos.push(todo)   
        },
        removeTodo: (state, action) => {
            state.todos = state.todos.filter((todo) => todo.id !== action.payload ) //same here bas id araha hai koi object nhi
        },
         updateTodo:(state,action)=>{
            state.todos=state.todos.map((todo)=> todo.id === action.payload.id ? {...todo,text:action.payload.text} : todo)
            //yaha pura object araha hai, dispatch(updateTodo({ id: todo.id, text: editText })); isiliye  action.payload.text likhn a jaruri hai to identify the correct todo
        }
    }
})



export const {addTodo, removeTodo,updateTodo} = todoSlice.actions  //Redux Toolkit automatically action creators bana deta hai.todoSlice.actions.addTodo,todoSlice.actions.removeTodo...Yaha tum object destructuring kar rahe ho.Matlab todoSlice.actions se direct ye teen functions nikal liye:

export default todoSlice.reducer

//state â†’ Ye tumhara current slice ka state hai.Redux Toolkit me ye mutable dikh raha hai (like state.todos.push(todo)) kyunki andar hi andar Immer use hota hai jo immutable update me convert kar deta hai.

//action â†’Ye ek object hota hai jo batata hai ki kya karna hai.Hamesha 2 cheez hoti hai:
// action={
//   type: "todo/addTodo",   // auto generated by slice         type â†’ batata hai ki kaunsa reducer chalna chahiye
//   payload: input          // tumne dispatch ke time bheja      payload â†’ woh data jo state update karne ke liye chahiye
// }
//Isiliye action.payload likh rahe ho, na ki action.payload.text. Agar tum dispatch karte:dispatch(addTodo({ id: 5, text: "hello" }))
//Tab reducer me action.payload.text access karna padta.




// Redux store ek centralized global state provide karta hai. Toh jab page reload nahi hota, ya session chal raha hota hai, Redux state me data rehta hai.

// Lekin:

// Page reload hone pe Redux store reset ho jata hai â€” isliye agar tum data persist karna chahte ho across page refreshes, tab bhi localStorage ki jarurat padti hai.

// ðŸ”¥ Ab Context API me jarurat zyada kyu padti hai?
// Context API me tum khud se state manage kar rahe ho (aur uska update logic).

// Redux Toolkit me middleware, DevTools, persist, and structure zyada powerful hai.

// src/
// â”œâ”€â”€ components/       # Navbar, Footer, ProductCard
// â”œâ”€â”€ features/
// â”‚   â”œâ”€â”€ cart/
// â”‚   â”‚   â”œâ”€â”€ CartSlice.js
// â”‚   â”‚   â””â”€â”€ CartSummary.jsx
// â”‚   â””â”€â”€ products/
// â”‚       â”œâ”€â”€ ProductsSlice.js
// â”‚       â””â”€â”€ ProductList.jsx
// â”œâ”€â”€ pages/            # HomePage, ProductPage, CartPage
// â”œâ”€â”€ redux/            # store.js
// â”œâ”€â”€ services/         # productApi.js, cartApi.js
// â””â”€â”€ utils/            # formatCurrency.js, validation.js


// Explanation:

// components/ â†’ Reusable dumb UI components (buttons, modals, cards, forms).

// features/ â†’ Feature-based foldering with Redux slice + UI (good for large apps).

// pages/ â†’ Route-based pages (Home, Login, Dashboard).

// redux/ â†’ Store setup, middleware, persistConfig, etc.
 
// hooks/ â†’ Custom React hooks (like useFetch, useAuth).

// services/ â†’ API logic, backend integration, business logic.

// layouts/ â†’ Common layout wrappers (header + sidebar + footer).

// utils/ â†’ Helper functions (date formatting, validation, constants).

// assets/ â†’ Static files (images, fonts, icons).